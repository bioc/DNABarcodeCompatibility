% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{utilities_DNABarcodeCompatibility}
\alias{utilities_DNABarcodeCompatibility}
\alias{read_index}
\alias{unicity_check}
\alias{character_check}
\alias{sequences_character_check}
\alias{length_check}
\alias{character_and_length_check}
\alias{index_check}
\alias{get_sequence_GC_content}
\alias{get_index_GC_content}
\alias{get_sequence_homopolymer}
\alias{get_index_homopolymer}
\alias{sample_number_check}
\alias{multiplexing_level_set}
\alias{sample_and_multiplexing_level_check}
\alias{sequence_binary_conversion_4_channel}
\alias{index_binary_conversion_4_channel}
\alias{sequence_binary_conversion_2_channel_1}
\alias{sequence_binary_conversion_2_channel_2}
\alias{index_binary_conversion_2_channel}
\alias{sequence_binary_conversion_1_channel_1}
\alias{sequence_binary_conversion_1_channel_2}
\alias{index_binary_conversion_1_channel}
\alias{binary_word_into_numeric}
\alias{vectors_into_matrix}
\alias{any_different}
\alias{has_signal_in_both_channels}
\alias{is_a_good_combination}
\alias{is_a_good_combination_2}
\alias{list_of_good_combinations}
\alias{list_of_good_combinations_2}
\alias{id_into_4_channel_binary_sequence}
\alias{id_into_2_channel_image_1_binary_sequence}
\alias{id_into_2_channel_image_2_binary_sequence}
\alias{id_into_1_channel_image_1_binary_sequence}
\alias{id_into_1_channel_image_2_binary_sequence}
\alias{matrix_id_to_binary_sequence}
\alias{matrix_id_to_2_channel_image_1_binary_sequence}
\alias{matrix_id_to_2_channel_image_2_binary_sequence}
\alias{matrix_id_to_1_channel_image_1_binary_sequence}
\alias{matrix_id_to_1_channel_image_2_binary_sequence}
\alias{get_all_combinations_4_channel}
\alias{get_all_combinations_2_channel}
\alias{get_all_combinations_1_channel}
\alias{get_random_combinations_4_channel}
\alias{get_random_combinations_2_channel}
\alias{get_random_combinations_1_channel}
\alias{get_combinations}
\alias{index_distance}
\alias{low_hamming_distance}
\alias{low_seqlev_distance}
\alias{filter_combinations}
\alias{shannon_entropy}
\alias{entropy_result}
\alias{entropy_n_k}
\alias{entropy_max}
\alias{recursive_entropy}
\alias{get_result}
\alias{check_for_duplicate}
\alias{display_message}
\alias{is_a_prime_number}
\alias{final_result}
\alias{final_result_dual}
\title{Group of utility functions}
\usage{
read_index(file)

unicity_check(index)

character_check(sequence)

sequences_character_check(sequences)

length_check(sequences)

character_and_length_check(index)

index_check(index)

get_sequence_GC_content(sequence)

get_index_GC_content(index)

get_sequence_homopolymer(sequence)

get_index_homopolymer(index)

sample_number_check(sample_number)

multiplexing_level_set(sample_number)

sample_and_multiplexing_level_check(sample_number, mplex_level)

sequence_binary_conversion_4_channel(sequence)

index_binary_conversion_4_channel(index)

sequence_binary_conversion_2_channel_1(sequence)

sequence_binary_conversion_2_channel_2(sequence)

index_binary_conversion_2_channel(index)

sequence_binary_conversion_1_channel_1(sequence)

sequence_binary_conversion_1_channel_2(sequence)

index_binary_conversion_1_channel(index)

binary_word_into_numeric(binary_word)

vectors_into_matrix(binary_word)

any_different(binary_sequence)

has_signal_in_both_channels(colored_sequence)

is_a_good_combination(combination_matrix)

is_a_good_combination_2(combination_matrix)

list_of_good_combinations(matrix_id)

list_of_good_combinations_2(matrix_id)

id_into_4_channel_binary_sequence(index_id_combination, index_df)

id_into_2_channel_image_1_binary_sequence(index_id_combination, index_df)

id_into_2_channel_image_2_binary_sequence(index_id_combination, index_df)

id_into_1_channel_image_1_binary_sequence(index_id_combination, index_df)

id_into_1_channel_image_2_binary_sequence(index_id_combination, index_df)

matrix_id_to_binary_sequence(matrix_id, index_df)

matrix_id_to_2_channel_image_1_binary_sequence(matrix_id, index_df)

matrix_id_to_2_channel_image_2_binary_sequence(matrix_id, index_df)

matrix_id_to_1_channel_image_1_binary_sequence(matrix_id, index_df)

matrix_id_to_1_channel_image_2_binary_sequence(matrix_id, index_df)

get_all_combinations_4_channel(index_df, mplex_level)

get_all_combinations_2_channel(index_df, mplex_level)

get_all_combinations_1_channel(index_df, mplex_level)

get_random_combinations_4_channel(index_df, mplex_level)

get_random_combinations_2_channel(index_df, mplex_level)

get_random_combinations_1_channel(index_df, mplex_level)

get_combinations(index_df, mplex_level, chemistry)

index_distance(index_df)

low_hamming_distance(index_df, index_distance_df, d)

low_seqlev_distance(index_df, index_distance_df, d)

filter_combinations(combinations_m, low_distance_tab)

shannon_entropy(frequence)

entropy_result(index_combination)

entropy_n_k(index_number, sample_number)

entropy_max(index_number, sample_number)

recursive_entropy(combination_m, nb_lane)

get_result(index_df, sample_number, mplex_level, chemistry, metric = NULL,
  d = 3)

check_for_duplicate(result1, result2)

display_message(a_message)

is_a_prime_number(sample_number)

final_result(file1, sample_number, mplex_level, chemistry, filter, metric)

final_result_dual(file1, file2, sample_number, mplex_level, chemistry, filter,
  metric)
}
\arguments{
\item{file}{a file containing a representation of the DNA-barcode dataset.}

\item{index}{a dataframe containing a representation of the DNA-barcode dataset.}

\item{sequence}{a DNA sequence as string}

\item{sequences}{a lsit DNA sequences as string}

\item{sample_number}{number of libraries}

\item{index_distances}{a dataframe containing the calculted distances between pairs de DNA barcodes}

\item{metrict}{threshold distance between barcodes}
}
\value{
The return value depends on the function
}
\description{
Group of functions that are internally used by the DNABarcodeCompatibility package and by the external GUI in Java
}
\details{
These functions are used by the GUI in Java. They are not meant to be used in R scripts.
}
